// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  name      String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  mailbody  MailBody[]
  mails     Mail[]
  trashes   Trash[]
}

model MailBody {
  id        Int      @id @default(autoincrement())
  from      String
  to        String
  cc        String?
  bcc       String?
  subject   String
  body      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  Mail      Mail[]
}

model Mail {
  id        Int      @id @default(autoincrement())
  mailId    Int
  type      MailType
  deliver   Boolean  @default(false)  
  resendMailId  String? @default(uuid())   @map("resend_mail_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  mailbody  MailBody @relation(fields: [mailId], references: [id])
  Trash     Trash[]
}

enum MailType {
  INBOX
  SENT
  DRAFT
}

model Trash {
  id        Int      @id @default(autoincrement())
  mailId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  mail      Mail     @relation(fields: [mailId], references: [id])
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}
